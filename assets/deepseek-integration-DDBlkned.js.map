{"version":3,"mappings":"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","names":["frontendDownloadManager","constructor","this","loadCloudStorageConfig","downloadQueue","Map","downloadHistory","loadDownloadHistory","response","fetch","cloudStorage","json","error","console","storages","history","localStorage","getItem","JSON","parse","saveDownloadHistory","setItem","stringify","showCloudStorageDialog","toolId","Promise","resolve","availableStorages","Object","entries","filter","storage","tools","length","alert","storageId","url","extractCode","dialog","document","createElement","className","innerHTML","storageList","querySelector","forEach","storageItem","name","addEventListener","body","removeChild","appendChild","downloadTool","storageInfo","downloadInfo","id","Date","now","timestamp","unshift","pop","window","open","showExtractCode","logDownloadEvent","notification","navigator","clipboard","writeText","catch","err","setTimeout","contains","gtag","event_category","event_label","getDownloadHistory","clearDownloadHistory","DeepSeekIntegration","downloadManager","init","ENV","apiKeysConfig","__vitePreload","import","__VITE_PRELOAD__","default","DEEPSEEK_API_KEY","encryptedApiKey","CryptoUtils","encrypt","ENCRYPTION_KEY","DEEPSEEK_API_KEY_ENCRYPTED","log","getApiKey","_a","Error","decrypt"],"ignoreList":[],"sources":["../../src/js/modules/frontend-download-manager.js","../../src/js/modules/deepseek-integration.js"],"sourcesContent":["/**\n * 纯前端下载管理器\n * 替代原有的后端下载API，使用云存储链接直接下载\n */\n\nclass FrontendDownloadManager {\n    constructor() {\n        // 加载云存储配置\n        this.loadCloudStorageConfig();\n        \n        // 下载队列\n        /** @type {Map<string, {progress: number, status: string}>} */\n        this.downloadQueue = new Map();\n        \n        // 下载历史记录\n        this.downloadHistory = this.loadDownloadHistory();\n    }\n\n    /**\n     * 加载云存储配置\n     */\n    async loadCloudStorageConfig() {\n        try {\n            const response = await fetch('/src/config/cloud-storage.json');\n            this.cloudStorage = await response.json();\n        } catch (error) {\n            console.error('加载云存储配置失败:', error);\n            this.cloudStorage = { storages: {} };\n        }\n    }\n\n    /**\n     * 加载下载历史记录\n     * @returns {Array} 下载历史记录\n     */\n    loadDownloadHistory() {\n        try {\n            const history = localStorage.getItem('download_history');\n            return history ? JSON.parse(history) : [];\n        } catch (error) {\n            console.error('加载下载历史记录失败:', error);\n            return [];\n        }\n    }\n\n    /**\n     * 保存下载历史记录\n     */\n    saveDownloadHistory() {\n        try {\n            localStorage.setItem('download_history', JSON.stringify(this.downloadHistory));\n        } catch (error) {\n            console.error('保存下载历史记录失败:', error);\n        }\n    }\n\n    /**\n     * 显示网盘选择对话框\n     * @param {string} toolId 工具ID\n     * @returns {Promise<{storage: string, url: string, extractCode?: string}>}\n     */\n    showCloudStorageDialog(toolId) {\n        return new Promise((resolve) => {\n            const storages = this.cloudStorage.storages;\n            const availableStorages = Object.entries(storages)\n                .filter(([, storage]) => storage.tools && storage.tools[toolId]);\n\n            if (availableStorages.length === 0) {\n                alert('没有可用的下载链接');\n                resolve(null);\n                return;\n            }\n\n            // 如果只有一个存储选项，直接使用\n            if (availableStorages.length === 1) {\n                const [storageId, storage] = availableStorages[0];\n                resolve({\n                    storage: storageId,\n                    url: storage.tools[toolId].url,\n                    extractCode: storage.tools[toolId].extractCode\n                });\n                return;\n            }\n\n            // 创建对话框\n            const dialog = document.createElement('div');\n            dialog.className = 'cloud-storage-dialog';\n            dialog.innerHTML = `\n                <div class=\"dialog-content\">\n                    <h3>选择下载源</h3>\n                    <div class=\"storage-list\"></div>\n                    <div class=\"dialog-buttons\">\n                        <button class=\"cancel-btn\">取消</button>\n                    </div>\n                </div>\n            `;\n\n            // 添加存储选项\n            const storageList = dialog.querySelector('.storage-list');\n            availableStorages.forEach(([storageId, storage]) => {\n                const storageItem = document.createElement('div');\n                storageItem.className = 'storage-item';\n                storageItem.innerHTML = `\n                    <div class=\"storage-name\">${storage.name}</div>\n                    <button class=\"select-btn\">选择</button>\n                `;\n\n                storageItem.querySelector('.select-btn').addEventListener('click', () => {\n                    document.body.removeChild(dialog);\n                    resolve({\n                        storage: storageId,\n                        url: storage.tools[toolId].url,\n                        extractCode: storage.tools[toolId].extractCode\n                    });\n                });\n\n                storageList.appendChild(storageItem);\n            });\n\n            // 取消按钮\n            dialog.querySelector('.cancel-btn').addEventListener('click', () => {\n                document.body.removeChild(dialog);\n                resolve(null);\n            });\n\n            document.body.appendChild(dialog);\n        });\n    }\n\n    /**\n     * 下载工具\n     * @param {string} toolId 工具ID\n     */\n    async downloadTool(toolId) {\n        try {\n            // 显示网盘选择对话框\n            const storageInfo = await this.showCloudStorageDialog(toolId);\n            if (!storageInfo) return;\n\n            // 记录下载历史\n            const downloadInfo = {\n                id: `${toolId}-${Date.now()}`,\n                toolId,\n                storage: storageInfo.storage,\n                url: storageInfo.url,\n                timestamp: Date.now()\n            };\n            \n            this.downloadHistory.unshift(downloadInfo);\n            if (this.downloadHistory.length > 50) {\n                this.downloadHistory.pop();\n            }\n            this.saveDownloadHistory();\n\n            // 打开下载链接\n            window.open(storageInfo.url, '_blank');\n            \n            // 如果有提取码，显示提取码\n            if (storageInfo.extractCode) {\n                this.showExtractCode(storageInfo.extractCode);\n            }\n\n            // 记录下载事件（可用于分析）\n            this.logDownloadEvent(toolId, storageInfo.storage);\n\n            return downloadInfo;\n        } catch (error) {\n            console.error('下载工具失败:', error);\n            alert('下载失败，请稍后重试');\n            return null;\n        }\n    }\n\n    /**\n     * 显示提取码\n     * @param {string} extractCode 提取码\n     */\n    showExtractCode(extractCode) {\n        const notification = document.createElement('div');\n        notification.className = 'extract-code-notification';\n        notification.innerHTML = `\n            <div class=\"notification-content\">\n                <h4>网盘提取码</h4>\n                <div class=\"extract-code\">${extractCode}</div>\n                <p>提取码已复制到剪贴板</p>\n                <button class=\"close-btn\">关闭</button>\n            </div>\n        `;\n\n        // 复制提取码到剪贴板\n        navigator.clipboard.writeText(extractCode).catch(err => {\n            console.error('复制提取码失败:', err);\n        });\n\n        // 关闭按钮\n        notification.querySelector('.close-btn').addEventListener('click', () => {\n            document.body.removeChild(notification);\n        });\n\n        // 自动关闭\n        setTimeout(() => {\n            if (document.body.contains(notification)) {\n                document.body.removeChild(notification);\n            }\n        }, 10000);\n\n        document.body.appendChild(notification);\n    }\n\n    /**\n     * 记录下载事件\n     * @param {string} toolId 工具ID\n     * @param {string} storage 存储类型\n     */\n    logDownloadEvent(toolId, storage) {\n        // 使用前端分析工具记录事件，如Google Analytics\n        if (window.gtag) {\n            window.gtag('event', 'download', {\n                'event_category': 'tools',\n                'event_label': toolId,\n                'storage': storage\n            });\n        }\n    }\n\n    /**\n     * 获取下载历史\n     * @returns {Array} 下载历史\n     */\n    getDownloadHistory() {\n        return this.downloadHistory;\n    }\n\n    /**\n     * 清除下载历史\n     */\n    clearDownloadHistory() {\n        this.downloadHistory = [];\n        this.saveDownloadHistory();\n    }\n}\n\n// 导出单例实例\nexport const frontendDownloadManager = new FrontendDownloadManager();","// DeepSeek API 集成模块 - 仅用于API调用，不包含客服窗口\nimport { frontendDownloadManager } from './frontend-download-manager.js';\nimport CryptoUtils from './crypto-utils.js';\n\nexport class DeepSeekIntegration {\n    constructor() {\n        this.downloadManager = frontendDownloadManager;\n        this.init();\n    }\n\n    async init() {\n        try {\n            // 设置环境变量，确保API密钥可用但已加密\n            if (!window.ENV) window.ENV = {};\n            \n            // 导入API密钥配置\n            const apiKeysConfig = await import('../../../src/config/api-keys.js');\n            \n            // 从配置文件中获取API密钥（如果已经存在于配置中）\n            if (!apiKeysConfig.default.DEEPSEEK_API_KEY) {\n                console.error('DeepSeek API密钥未在配置文件中设置');\n                return;\n            }\n            \n            // 加密的API密钥\n            const encryptedApiKey = await CryptoUtils.encrypt(apiKeysConfig.default.DEEPSEEK_API_KEY, apiKeysConfig.default.ENCRYPTION_KEY);\n            window.ENV.DEEPSEEK_API_KEY_ENCRYPTED = encryptedApiKey;\n            \n            console.log('DeepSeek API integration initialized with encrypted key');\n        } catch (error) {\n            console.error('Failed to initialize DeepSeek integration:', error);\n        }\n    }\n    \n    /**\n     * 获取解密后的API密钥\n     * @returns {Promise<string>} 解密后的API密钥\n     */\n    async getApiKey() {\n        try {\n            if (!window.ENV?.DEEPSEEK_API_KEY_ENCRYPTED) {\n                throw new Error('Encrypted API key not found');\n            }\n            \n            // 导入API密钥配置\n            const apiKeysConfig = await import('../../../src/config/api-keys.js');\n            \n            return await CryptoUtils.decrypt(\n                window.ENV.DEEPSEEK_API_KEY_ENCRYPTED, \n                apiKeysConfig.default.ENCRYPTION_KEY\n            );\n        } catch (error) {\n            console.error('Failed to decrypt API key:', error);\n            throw new Error('API key decryption failed');\n        }\n    }\n}\n\n// 初始化DeepSeek集成\ntry {\n    new DeepSeekIntegration();\n} catch (error) {\n    console.error('Failed to initialize DeepSeek integration:', error);\n}\n"],"file":"assets/deepseek-integration-DDBlkned.js"}