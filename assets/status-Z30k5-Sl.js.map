{"version":3,"mappings":";6MA8DAA,eAAeC,IACP,IAEM,MAAAC,QAqDdF,iBACQ,IAEA,MAAMG,EAAW,CACbC,OAAQC,KAAKC,MAAMC,KAAKC,MAAQ,KAAQH,KAAKC,MAAsB,MAAhBD,KAAKI,UACxDC,KAAML,KAAKC,MAAsB,IAAhBD,KAAKI,WAGnB,OACHL,OAAQO,EAAaR,EAASC,QAC9BM,KAAMP,EAASO,KAEtB,OAAQE,GAGE,OAFCC,QAAAD,MAAM,YAAaA,GAEpB,CACHR,OAAQO,EAAaN,KAAKC,MAAMC,KAAKC,MAAQ,MAC7CE,KAAM,EAElB,CACA,CAzEiCI,GAGzBC,EAAab,EAAWE,QACxBY,EAAWd,EAAWQ,MA4B9B,SAA+BA,GACrB,MAAAO,EAAYC,SAASC,cAAc,qBACrCF,IAEAA,EAAUG,UAAUC,OAAO,gBAAiB,iBAAkB,iBAAkB,gBAG5EX,EAAO,GACGO,EAAAG,UAAUE,IAAI,iBACjBZ,EAAO,GACJO,EAAAG,UAAUE,IAAI,kBAEdL,EAAAG,UAAUE,IAAI,kBAIlBL,EAAAM,MAAQ,UAAUb,KAEpC,CA3CQc,CAAsBtB,EAAWQ,KACpC,OAAQE,GACGC,QAAAD,MAAM,UAAWA,GACRa,EAAA,CACbF,MAAO,OACPG,QAAS,aACTC,WAAY,KACZC,cAAe3B,GAE3B,CACA,CAGA,SAASc,EAAac,GACZ,MAAAC,EAAUZ,SAASa,eAAe,UACpCD,MAAiBE,YAAcH,EACvC,CAGA,SAASb,EAAWa,GACV,MAAAC,EAAUZ,SAASa,eAAe,QACpCD,IAASA,EAAQE,YAAc,GAAGH,KAC1C,CA+CA,SAASlB,EAAasB,GAClB,MAAMC,EAAQ7B,KAAKC,MAAM2B,EAAU,MAC7BE,EAAU9B,KAAKC,MAAO2B,EAAU,KAAQ,IACxCG,EAAOH,EAAU,GAChB,SAAGI,EAAQH,MAAUG,EAAQF,MAAYE,EAAQD,IAC5D,CAGA,SAASC,EAAQC,GACb,OAAOA,EAAIC,WAAWC,SAAS,EAAG,IACtC,CAGAtB,SAASuB,iBAAiB,oBA7I1BzC,iBACQ,IAEA0C,EAAqB,eAwBzB3B,EAAa,YACbC,EAAW,MAGXE,SAASyB,iBAAiB,gBAAgBC,SAAgBC,IACjDA,EAAAJ,iBAAiB,SAAS,KACtBI,EAAAzB,UAAUE,IAAI,UACnBwB,YAAW,IAAMD,EAAKzB,UAAUC,OAAO,WAAW,IAAG,GACxD,IAOSpB,IAGd8C,YAAY9C,EAhDQ,KAeM+C,GACzB,OAAQpC,GACGC,QAAAD,MAAM,aAAcA,GACXa,EAAA,CACbF,MAAO,OACPG,QAAS,oBACTC,WAAY,KACZC,cAAe,IAAMqB,OAAOC,SAASC,UAEjD,CACA,IClCQjC,SAASuB,iBAAiB,oBAAoB,YAE1CW,OAAO,gCAAoCC,0BAACC,MAAeC,IAEnDN,OAAOO,KAAOP,OAAOO,IAAIC,2BAE1BC,GAAA,IAACN,OAAO,sDAA0CC,0BAAEC,MAA0BK,IACrD,IAAIA,EAAkBC,qBACvBC,cACpBP,MAAeQ,IAEdP,EAAOQ,QAAQC,KAAK,CAChBC,UAAW,kBACXC,SAAU,eACVJ,UACH,IACFK,OAAevD,IACNC,QAAAD,MAAM,aAAcA,GAE5B2C,EAAOQ,QAAQC,KAAK,CAChBC,UAAW,kBACXC,SAAU,eACVJ,OAAQ,MACX,IAILP,EAAOQ,QAAQC,KAAK,CAChBC,UAAW,kBACXC,SAAU,eACVJ,OAAQ,MAEhC,IACeK,OAAevD,IACNC,QAAAD,MAAM,YAAaA,EAAK,GACnC","names":["async","updateStatus","statusData","mockData","uptime","Math","floor","Date","now","random","load","formatUptime","error","console","fetchStatusData","updateUptime","updateLoad","indicator","document","querySelector","classList","remove","add","title","updateStatusIndicator","showErrorMessage","message","actionText","actionHandler","value","element","getElementById","textContent","seconds","hours","minutes","secs","padZero","num","toString","padStart","addEventListener","showLoadingIndicator","querySelectorAll","forEach","card","setTimeout","setInterval","hideLoadingIndicator","window","location","reload","import","__VITE_PRELOAD__","then","module","ENV","DEEPSEEK_API_KEY_ENCRYPTED","__vitePreload","integrationModule","DeepSeekIntegration","getApiKey","apiKey","default","init","container","position","catch"],"ignoreList":[],"sources":["../../src/js/status.js","../../status.html?html-proxy&index=6.js"],"sourcesContent":["// 导入样式和依赖\nimport '../css/status.css';\nimport '../css/components.css';\nimport '../css/ui-feedback.css';\nimport '../css/status-indicator.css';\nimport { showErrorMessage, showLoadingIndicator, hideLoadingIndicator } from './components/ui-feedback.js';\nimport './animations.js';\nimport '../i18n.js';\n\n// 状态更新间隔（毫秒）\nconst UPDATE_INTERVAL = 5000;\n\n// 初始化状态页面\nasync function initStatusPage() {\n    try {\n        // 显示加载状态\n        showLoadingIndicator('正在加载系统状态...');\n\n        // 初始化状态卡片\n        initializeStatusCards();\n\n        // 开始定期更新状态\n        startStatusUpdates();\n\n        // 隐藏加载状态\n        hideLoadingIndicator();\n    } catch (error) {\n        console.error('状态页面初始化失败:', error);\n        showErrorMessage({\n            title: '加载失败',\n            message: '无法加载系统状态信息，请稍后重试。',\n            actionText: '重试',\n            actionHandler: () => window.location.reload()\n        });\n    }\n}\n\n// 初始化状态卡片\nfunction initializeStatusCards() {\n    // 设置初始状态\n    updateUptime('--:--:--');\n    updateLoad('--');\n\n    // 添加状态卡片的交互效果\n    document.querySelectorAll('.status-card').forEach(card => {\n        card.addEventListener('click', () => {\n            card.classList.add('active');\n            setTimeout(() => card.classList.remove('active'), 200);\n        });\n    });\n}\n\n// 开始定期更新状态\nfunction startStatusUpdates() {\n    // 立即执行一次更新\n    updateStatus();\n    \n    // 设置定期更新\n    setInterval(updateStatus, UPDATE_INTERVAL);\n}\n\n// 更新状态信息\nasync function updateStatus() {\n    try {\n        // 获取服务器状态数据\n        const statusData = await fetchStatusData();\n        \n        // 更新UI显示\n        updateUptime(statusData.uptime);\n        updateLoad(statusData.load);\n\n        // 更新状态指示器\n        updateStatusIndicator(statusData.load);\n    } catch (error) {\n        console.error('状态更新失败:', error);\n        showErrorMessage({\n            title: '更新失败',\n            message: '无法获取最新状态信息',\n            actionText: '重试',\n            actionHandler: updateStatus\n        });\n    }\n}\n\n// 更新运行时间显示\nfunction updateUptime(value) {\n    const element = document.getElementById('uptime');\n    if (element) element.textContent = value;\n}\n\n// 更新负载显示\nfunction updateLoad(value) {\n    const element = document.getElementById('load');\n    if (element) element.textContent = `${value}%`;\n}\n\n// 更新状态指示器\nfunction updateStatusIndicator(load) {\n    const indicator = document.querySelector('.status-indicator');\n    if (indicator) {\n        // 移除所有可能的状态类\n        indicator.classList.remove('status-online', 'status-warning', 'status-offline', 'status-error');\n        \n        // 根据负载值设置对应的状态类\n        if (load < 50) {\n            indicator.classList.add('status-online');\n        } else if (load < 80) {\n            indicator.classList.add('status-warning');\n        } else {\n            indicator.classList.add('status-offline');\n        }\n        \n        // 设置状态提示\n        indicator.title = `服务器负载: ${load}%`;\n    }\n}\n\n// 获取实际状态数据\nasync function fetchStatusData() {\n    try {\n        // 由于API可能还未实现，先使用模拟数据\n        const mockData = {\n            uptime: Math.floor(Date.now() / 1000) - Math.floor(Math.random() * 86400),\n            load: Math.floor(Math.random() * 100)\n        };\n        \n        return {\n            uptime: formatUptime(mockData.uptime),\n            load: mockData.load\n        };\n    } catch (error) {\n        console.error('获取状态数据失败:', error);\n        // 返回默认值\n        return {\n            uptime: formatUptime(Math.floor(Date.now() / 1000)),\n            load: 0\n        };\n    }\n}\n\n// 格式化运行时间\nfunction formatUptime(seconds) {\n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor((seconds % 3600) / 60);\n    const secs = seconds % 60;\n    return `${padZero(hours)}:${padZero(minutes)}:${padZero(secs)}`;\n}\n\n// 数字补零\nfunction padZero(num) {\n    return num.toString().padStart(2, '0');\n}\n\n// 当DOM加载完成时初始化页面\ndocument.addEventListener('DOMContentLoaded', initStatusPage);\n","\n        document.addEventListener('DOMContentLoaded', () => {\n            // 初始化客服系统\n            import('./src/js/modules/deepseek-chat.js').then(module => {\n                // 先检查是否有加密的API密钥\n                if (window.ENV && window.ENV.DEEPSEEK_API_KEY_ENCRYPTED) {\n                    // 如果有，先导入集成模块并获取解密后的API密钥\n                    import('./src/js/modules/deepseek-integration.js').then(integrationModule => {\n                        const integration = new integrationModule.DeepSeekIntegration();\n                        return integration.getApiKey();\n                    }).then(apiKey => {\n                        // 使用获取到的API密钥初始化客服系统\n                        module.default.init({\n                            container: '#chat-container',\n                            position: 'bottom-right',\n                            apiKey: apiKey\n                        });\n                    }).catch(error => {\n                        console.error('API密钥获取失败:', error);\n                        // 即使没有API密钥，也尝试初始化客服系统\n                        module.default.init({\n                            container: '#chat-container',\n                            position: 'bottom-right',\n                            apiKey: null\n                        });\n                    });\n                } else {\n                    // 如果没有加密的API密钥，直接初始化客服系统\n                    module.default.init({\n                        container: '#chat-container',\n                        position: 'bottom-right',\n                        apiKey: null\n                    });\n                }\n            }).catch(error => {\n                console.error('客服系统加载失败:', error);\n            });\n        });\n    \n    "],"file":"assets/status-Z30k5-Sl.js"}