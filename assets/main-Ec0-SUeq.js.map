{"version":3,"mappings":"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","names":["showLoadingIndicator","message","indicator","document","querySelector","createElement","className","innerHTML","body","appendChild","createLoadingIndicator","textContent","style","display","hideLoadingIndicator","showErrorMessage","options","errorElement","remove","title","actionText","actionHandler","addEventListener","createErrorMessage","initGlobalChat","window","deepseekChatWidget","setTimeout","DeepSeekChatWidget","console","log","i18n","t","error","resourcePreloader","constructor","this","loadedResources","Set","loadingPromises","Map","maxConcurrent","loadingCount","queue","_addToQueue","resource","push","Promise","resolve","reject","originalProcess","_processQueue","bind","async","has","url","catch","length","shift","_loadResource","timeout","retries","attempt","controller","AbortController","timeoutId","abort","response","fetch","signal","clearTimeout","ok","Error","status","blob","objectUrl","URL","createObjectURL","add","Math","pow","preload","resources","onProgress","loaded","total","loadPromises","map","get","then","promise","set","finally","delete","all","cleanup","clear","criticalResources","path","type","initializeApp","priority","round","visibility","default","app","__vitePreload","import","__VITE_PRELOAD__","initialized","init","documentElement","removeAttribute","readyState"],"ignoreList":[],"sources":["../../src/js/components/ui-feedback.js","../../src/js/global-chat-init.js","../../main.js","../../src/js/modules/resource-preloader.js"],"sourcesContent":["// UI反馈组件\n\n// 创建加载指示器元素\nfunction createLoadingIndicator() {\n    const indicator = document.createElement('div');\n    indicator.className = 'loading-indicator';\n    indicator.innerHTML = `\n        <div class=\"loading-spinner\"></div>\n        <div class=\"loading-message\"></div>\n    `;\n    document.body.appendChild(indicator);\n    return indicator;\n}\n\n// 显示加载指示器\nexport function showLoadingIndicator(message = '加载中...') {\n    let indicator = document.querySelector('.loading-indicator');\n    if (!indicator) {\n        indicator = createLoadingIndicator();\n    }\n    indicator.querySelector('.loading-message').textContent = message;\n    indicator.style.display = 'flex';\n}\n\n// 隐藏加载指示器\nexport function hideLoadingIndicator() {\n    const indicator = document.querySelector('.loading-indicator');\n    if (indicator) {\n        indicator.style.display = 'none';\n    }\n}\n\n// 创建错误消息元素\nfunction createErrorMessage(options) {\n    const { title, message, actionText, actionHandler } = options;\n    const errorElement = document.createElement('div');\n    errorElement.className = 'error-message';\n    errorElement.innerHTML = `\n        <div class=\"error-content\">\n            <h3>${title}</h3>\n            <p>${message}</p>\n            ${actionText ? `<button class=\"error-action\">${actionText}</button>` : ''}\n        </div>\n    `;\n\n    if (actionText && actionHandler) {\n        const actionButton = errorElement.querySelector('.error-action');\n        actionButton.addEventListener('click', actionHandler);\n    }\n\n    document.body.appendChild(errorElement);\n    return errorElement;\n}\n\n// 显示错误消息\nexport function showErrorMessage(options) {\n    let errorElement = document.querySelector('.error-message');\n    if (errorElement) {\n        errorElement.remove();\n    }\n    errorElement = createErrorMessage(options);\n    errorElement.style.display = 'flex';\n}\n\n// 隐藏错误消息\nexport function hideErrorMessage() {\n    const errorElement = document.querySelector('.error-message');\n    if (errorElement) {\n        errorElement.remove();\n    }\n}","/**\n * 全局DeepSeek客服聊天窗口初始化脚本\n * 用于确保客服功能在所有页面上可用\n */\n\nimport DeepSeekChatWidget from './modules/deepseek-chat-widget.js';\nimport i18n from '../i18n.js';\n\n// 定义全局初始化函数\nfunction initGlobalChat() {\n    // 检查是否已经初始化\n    if (window.deepseekChatWidget) {\n        return;\n    }\n    \n    // 延迟加载客服窗口，避免影响页面首次加载性能\n    setTimeout(() => {\n        try {\n            // 初始化客服聊天窗口\n            window.deepseekChatWidget = new DeepSeekChatWidget();\n            console.log(i18n.t('deepseek.logs.initialized', 'DeepSeek客服聊天窗口已加载'));\n        } catch (error) {\n            console.error(i18n.t('deepseek.logs.initFailed', '初始化DeepSeek客服聊天窗口失败:'), error);\n        }\n    }, 1000); // 延迟1秒加载\n}\n\n// 在DOM加载完成后初始化客服聊天窗口\ndocument.addEventListener('DOMContentLoaded', initGlobalChat);\n\n// 导出初始化函数，以便其他模块可以手动调用\nexport default initGlobalChat;","// CSS文件已在HTML中通过link标签引入\n// 不再通过ES模块方式导入CSS文件\n\n// 导入核心模块\nimport { ResourcePreloader } from './src/js/modules/resource-preloader.js';\nimport { showLoadingIndicator, hideLoadingIndicator } from './src/js/components/ui-feedback.js';\nimport initGlobalChat from './src/js/global-chat-init.js';\n\n// 初始化资源预加载器\nconst resourcePreloader = new ResourcePreloader();\n\n// 定义关键资源列表\nconst criticalResources = [\n    { path: './src/js/app.js', type: 'module' },\n    { path: './src/js/animations.js', type: 'module' },\n    { path: './src/js/theme-manager.js', type: 'module' },\n    { path: './src/js/components.js', type: 'module' },\n    { path: './src/js/tools-manager.js', type: 'module' },\n    { path: './src/i18n.js', type: 'module' }\n];\n\n// 初始化应用\nasync function initializeApp() {\n    try {\n        // 显示加载状态\n        showLoadingIndicator('正在初始化应用...');\n\n        // 预加载关键资源\n        await resourcePreloader.preload(criticalResources, {\n            priority: 'high',\n            timeout: 15000,\n            retries: 3,\n            onProgress: (loaded, total) => {\n                showLoadingIndicator(`正在加载应用资源...(${Math.round(loaded/total*100)}%)`);\n            }\n        });\n\n        // 确保页面基础结构可见\n        document.body.style.visibility = 'visible';\n        \n        // 动态导入并初始化应用\n        const { default: app } = await import('./src/js/app.js');\n        if (!app.initialized) {\n            await app.init();\n        }\n        \n        // 初始化全局聊天窗口\n        initGlobalChat();\n\n        // 移除加载状态\n        document.documentElement.removeAttribute('data-i18n-loading');\n        hideLoadingIndicator();\n\n        console.log('应用初始化完成');\n    } catch (error) {\n        console.error('应用初始化失败:', error);\n\n        // 确保页面至少显示基础内容\n        document.body.style.visibility = 'visible';\n        document.documentElement.removeAttribute('data-i18n-loading');\n        hideLoadingIndicator();\n        \n        // 不再显示错误消息窗口\n        // 静默处理错误，不打扰用户体验\n    }\n}\n\n// 确保DOM加载完成后再初始化应用\nif (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', initializeApp);\n} else {\n    initializeApp();\n}\n","/**\n * 资源预加载器\n */\nexport class ResourcePreloader {\n    constructor() {\n        this.loadedResources = new Set();\n        this.loadingPromises = new Map();\n        this.maxConcurrent = 5;\n        this.loadingCount = 0;\n        this.queue = [];\n    }\n\n    /**\n     * 添加资源到加载队列\n     * @param {Object} resource 资源对象\n     * @param {Object} options 加载选项\n     * @private\n     * @returns {Promise} 加载资源的Promise\n     */\n    _addToQueue(resource, options) {\n        this.queue.push({ resource, options });\n        return new Promise((resolve, reject) => {\n            // 创建一个Promise来跟踪资源加载\n            const originalProcess = this._processQueue.bind(this);\n            this._processQueue = async () => {\n                await originalProcess();\n                // 当资源加载完成时，检查是否是当前资源\n                if (this.loadedResources.has(resource.url)) {\n                    resolve();\n                }\n            };\n            this._processQueue().catch(reject);\n        });\n    }\n\n    /**\n     * 处理加载队列\n     * @private\n     */\n    async _processQueue() {\n        if (this.loadingCount >= this.maxConcurrent || this.queue.length === 0) {\n            return;\n        }\n\n        const { resource, options } = this.queue.shift();\n        this.loadingCount++;\n\n        try {\n            await this._loadResource(resource, options);\n        } finally {\n            this.loadingCount--;\n            this._processQueue();\n        }\n    }\n\n    /**\n     * 加载单个资源\n     * @param {Object} resource 资源对象\n     * @param {Object} options 加载选项\n     * @private\n     */\n    async _loadResource(resource, options) {\n        const { timeout = 10000, retries = 3 } = options;\n\n        for (let attempt = 0; attempt < retries; attempt++) {\n            try {\n                const controller = new AbortController();\n                const timeoutId = setTimeout(() => controller.abort(), timeout);\n\n                const response = await fetch(resource.url, {\n                    signal: controller.signal\n                });\n\n                clearTimeout(timeoutId);\n\n                if (!response.ok) {\n                    throw new Error(`HTTP error! status: ${response.status}`);\n                }\n\n                const blob = await response.blob();\n                const objectUrl = URL.createObjectURL(blob);\n\n                this.loadedResources.add(resource.url);\n                return objectUrl;\n\n            } catch (error) {\n                if (attempt === retries - 1) {\n                    throw error;\n                }\n                await new Promise(resolve => setTimeout(resolve, 1000 * Math.pow(2, attempt)));\n            }\n        }\n    }\n\n    /**\n     * 预加载资源\n     * @param {Array} resources 资源列表\n     * @param {Object} options 预加载选项\n     * @returns {Promise<void>}\n     */\n    async preload(resources, options = {}) {\n        const {\n            onProgress = null\n        } = options;\n\n        let loaded = 0;\n        const total = resources.length;\n\n        try {\n            const loadPromises = resources.map(resource => {\n                return new Promise((resolve, reject) => {\n                    if (this.loadedResources.has(resource.url)) {\n                        loaded++;\n                        if (onProgress) onProgress(loaded, total);\n                        resolve();\n                        return;\n                    }\n\n                    if (this.loadingPromises.has(resource.url)) {\n                        this.loadingPromises.get(resource.url)\n                            .then(() => {\n                                loaded++;\n                                if (onProgress) onProgress(loaded, total);\n                                resolve();\n                            })\n                            .catch(reject);\n                        return;\n                    }\n\n                    const promise = this._addToQueue(resource, options)\n                        .then(() => {\n                            loaded++;\n                            if (onProgress) onProgress(loaded, total);\n                        });\n\n                    this.loadingPromises.set(resource.url, promise);\n                    promise\n                        .then(resolve)\n                        .catch(reject)\n                        .finally(() => {\n                            this.loadingPromises.delete(resource.url);\n                        });\n                });\n            });\n\n            await Promise.all(loadPromises);\n        } catch (error) {\n            console.error('Resource preloading failed:', error);\n            throw error;\n        }\n    }\n\n    /**\n     * 清理资源\n     */\n    cleanup() {\n        this.loadedResources.clear();\n        this.loadingPromises.clear();\n        this.queue = [];\n    }\n}"],"file":"assets/main-Ec0-SUeq.js"}